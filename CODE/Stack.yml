Description: CF Stack for the Penny Discord Bot

Parameters:
  apiGatewayName:
    Type: String
    Default: penny-bot-api
  FileNameAddCoins:
    Type: String
    Description: Filename of the code function for the adding of coins uploaded to S3
    Default: PennyLambdaAddCoins
  BotToken:
    Type: String
    Description: The private token of the Penny-Bot
  RepositoryName:
    Type: String
    Description: The name of the ECR repository
    Default: penny-bot-discord-image

Resources:
  botAppRunner:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: Penny-Bot  
      HealthCheckConfiguration:
        HealthyThreshold: 2
        Interval: 5
        Path: /
        Timeout: 2
        UnhealthyThreshold: 2
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/PennyBotAppRunner
        AutoDeploymentsEnabled: true
        ImageRepository:
          #ImageIdentifier: !GetAtt botECRRepository.RepositoryUri
          ImageIdentifier: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:latest
          ImageRepositoryType: ECR
          ImageConfiguration:
            #StartCommand: docker run -p 8080:8080 177420307256.dkr.ecr.eu-west-1.amazonaws.com/penny-bot-discord-image
            Port: 8080
            RuntimeEnvironmentVariables:
              - 
                Name: BOT_TOKEN
                Value: !Ref BotToken
              - 
                Name: API_BASE_URL
                Value: !Join [ '/', [ !GetAtt apiGateway.ApiEndpoint, !Ref apiGatewayStage ] ]

  apiGateway: 
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Name: !Ref apiGatewayName
      Description: API Endpoints for the discord Penny bot
      ProtocolType: HTTP
      #Target: 
        #- !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FileNameAddCoins}-lambda/invocations
        #- !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FileNameBot}-lambda/invocations

  apiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref apiGateway
      StageName: prod
      AutoDeploy: true


  apiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStage

  addCoinIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Add Coin Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET 
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt addCoinFunction.Arn
      PayloadFormatVersion: '2.0'

  addCoinRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: 'POST /coin'
      Target: !Sub "integrations/${addCoinIntegration}"

  addCoinFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-discord-bot
        S3Key: !Sub ${FileNameAddCoins}.zip
      FunctionName: !Sub ${FileNameAddCoins}-lambda
      Handler: handler 
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2

  lambdaAddCoinPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${FileNameAddCoins}-lambda
      Principal: apigateway.amazonaws.com
    DependsOn: 
      - addCoinFunction

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow 
            Principal:
              Service: 
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
      Policies: 
        - PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:InvokeFunction
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchGetItem
                  - dynamodb:DeleteItem
                  - dynamodb:Attributes
                  - dynamodb:LeadingKeys
                  - dynamodb:ConditionCheckItem
                  - dynamodb:Scan
                  - lambda:UpdateFunctionCode
                Effect: Allow 
                Resource: 
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FileNameAddCoins}-lambda:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FileNameAddCoins}-lambda
                  - !GetAtt dynamoUserTable.Arn
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/penny-bot-table/*
          PolicyName: lamda
  
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/PennyLambda
      RetentionInDays: 30

  dynamoUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "penny-bot-table"
      AttributeDefinitions:
        -
          AttributeName: "pk"
          AttributeType: "S"
        - 
          AttributeName: "sk"
          AttributeType: "S"
        -
          AttributeName: "data1"
          AttributeType: "S"
        -
          AttributeName: "data2"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "pk"
          KeyType: "HASH"
        - 
          AttributeName: "sk"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        -
          IndexName: "GSI-1"
          KeySchema:
            -
              AttributeName: "data1"
              KeyType: "HASH"
            -
              AttributeName: "pk"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
        -
          IndexName: "GSI-2"
          KeySchema:
            - 
              AttributeName: "data2"
              KeyType: "HASH"
            -
              AttributeName: "pk"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

Outputs:
  lambdaArn:
    Value: !GetAtt addCoinFunction.Arn

  dynamoDBArn:
    Value: !GetAtt dynamoUserTable.Arn

  


